--- a/drivers/dahdi/dahdi-base.c
+++ b/drivers/dahdi/dahdi-base.c
@@ -4354,7 +4354,11 @@ static int dahdi_ioctl_getparams(struct
 	param.pulsebreaktime = chan->pulsebreaktime;
 	param.pulseaftertime = chan->pulseaftertime;
 	param.spanno = (chan->span) ? chan->span->spanno : 0;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 11, 0)
 	strlcpy(param.name, chan->name, sizeof(param.name));
+#else
+	strscpy(param.name, chan->name, sizeof(param.name));
+#endif
 	param.chanpos = chan->chanpos;
 	param.sigcap = chan->sigcap;
 	/* Return current law */
@@ -4442,8 +4446,13 @@ static int dahdi_ioctl_spanstat(struct f
 
 	spaninfo.spanno = s->spanno; /* put the span # in here */
 	spaninfo.totalspans = span_count();
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 11, 0)
 	strlcpy(spaninfo.desc, s->desc, sizeof(spaninfo.desc));
 	strlcpy(spaninfo.name, s->name, sizeof(spaninfo.name));
+#else
+	strscpy(spaninfo.desc, s->desc, sizeof(spaninfo.desc));
+	strscpy(spaninfo.name, s->name, sizeof(spaninfo.name));
+#endif
 	spaninfo.alarms = s->alarms;		/* get alarm status */
 	spaninfo.rxlevel = s->rxlevel;	/* get rx level */
 	spaninfo.txlevel = s->txlevel;	/* get tx level */
@@ -4470,6 +4479,7 @@ static int dahdi_ioctl_spanstat(struct f
 	spaninfo.lineconfig = s->lineconfig;
 	spaninfo.irq = 0;
 	spaninfo.linecompat = s->linecompat;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 11, 0)
 	strlcpy(spaninfo.lboname, dahdi_lboname(s->lbo),
 			  sizeof(spaninfo.lboname));
 	if (s->parent->manufacturer) {
@@ -4484,6 +4494,22 @@ static int dahdi_ioctl_spanstat(struct f
 		strlcpy(spaninfo.location, s->parent->location,
 			sizeof(spaninfo.location));
 	}
+#else
+	strscpy(spaninfo.lboname, dahdi_lboname(s->lbo),
+			  sizeof(spaninfo.lboname));
+	if (s->parent->manufacturer) {
+		strscpy(spaninfo.manufacturer, s->parent->manufacturer,
+			sizeof(spaninfo.manufacturer));
+	}
+	if (s->parent->devicetype) {
+		strscpy(spaninfo.devicetype, s->parent->devicetype,
+			sizeof(spaninfo.devicetype));
+	}
+	if (s->parent->location) {
+		strscpy(spaninfo.location, s->parent->location,
+			sizeof(spaninfo.location));
+	}
+#endif
 	if (s->spantype) {
 		/*
 		 * The API is brain-damaged, returning fixed length
@@ -4500,11 +4526,19 @@ static int dahdi_ioctl_spanstat(struct f
 		const char *st = dahdi_spantype2str(s->spantype);
 		switch (s->spantype) {
 		case SPANTYPE_DIGITAL_BRI_NT:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 11, 0)
 			strlcpy(spaninfo.spantype, "NT",
+#else
+			strscpy(spaninfo.spantype, "NT",
+#endif
 					sizeof(spaninfo.spantype));
 			break;
 		case SPANTYPE_DIGITAL_BRI_TE:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 11, 0)
 			strlcpy(spaninfo.spantype, "TE",
+#else
+			strscpy(spaninfo.spantype, "TE",
+#endif
 					sizeof(spaninfo.spantype));
 			break;
 		default:
@@ -4514,7 +4548,11 @@ static int dahdi_ioctl_spanstat(struct f
 			 * so no backward compatibility for this
 			 * broken interface.
 			 */
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 11, 0)
 			strlcpy(spaninfo.spantype, st,
+#else
+			strscpy(spaninfo.spantype, st,
+#endif
 					sizeof(spaninfo.spantype));
 			break;
 		}
@@ -4563,10 +4601,18 @@ static int dahdi_ioctl_spanstat_v1(struc
 	spaninfo_v1.spanno = s->spanno; /* put the span # in here */
 	spaninfo_v1.totalspans = 0;
 	spaninfo_v1.totalspans = span_count();
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 11, 0)
 	strlcpy(spaninfo_v1.desc,
+#else
+	strscpy(spaninfo_v1.desc,
+#endif
 			  s->desc,
 			  sizeof(spaninfo_v1.desc));
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 11, 0)
 	strlcpy(spaninfo_v1.name,
+#else
+	strscpy(spaninfo_v1.name,
+#endif
 			  s->name,
 			  sizeof(spaninfo_v1.name));
 	spaninfo_v1.alarms = s->alarms;
@@ -4588,6 +4634,7 @@ static int dahdi_ioctl_spanstat_v1(struc
 	spaninfo_v1.lineconfig = s->lineconfig;
 	spaninfo_v1.irq = 0;
 	spaninfo_v1.linecompat = s->linecompat;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 11, 0)
 	strlcpy(spaninfo_v1.lboname,
 			  dahdi_lboname(s->lbo),
 			  sizeof(spaninfo_v1.lboname));
@@ -4610,6 +4657,30 @@ static int dahdi_ioctl_spanstat_v1(struc
 				  dahdi_spantype2str(s->spantype),
 				  sizeof(spaninfo_v1.spantype));
 	}
+#else
+	strscpy(spaninfo_v1.lboname,
+			  dahdi_lboname(s->lbo),
+			  sizeof(spaninfo_v1.lboname));
+
+	if (s->parent->manufacturer) {
+		strscpy(spaninfo_v1.manufacturer, s->parent->manufacturer,
+			sizeof(spaninfo_v1.manufacturer));
+	}
+
+	if (s->parent->devicetype) {
+		strscpy(spaninfo_v1.devicetype, s->parent->devicetype,
+			sizeof(spaninfo_v1.devicetype));
+	}
+
+	strscpy(spaninfo_v1.location, s->parent->location,
+		sizeof(spaninfo_v1.location));
+
+	if (s->spantype) {
+		strscpy(spaninfo_v1.spantype,
+				  dahdi_spantype2str(s->spantype),
+				  sizeof(spaninfo_v1.spantype));
+	}
+#endif
 
 	if (copy_to_user((void __user *)data, &spaninfo_v1,
 			 sizeof(spaninfo_v1))) {
@@ -5280,7 +5351,11 @@ static int dahdi_ioctl_attach_echocan(un
 			 * always use it instead of any configured software
 			 * echocan. This matches the behavior in dahdi 2.4.1.2
 			 * and earlier releases. */
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 11, 0)
 			strlcpy(ae.echocan, hwec_def_name, sizeof(ae.echocan));
+#else
+			strscpy(ae.echocan, hwec_def_name, sizeof(ae.echocan));
+#endif
 
 		} else if (strcasecmp(ae.echocan, hwec_def_name) != 0) {
 			chan_dbg(GENERAL, chan,
@@ -5379,7 +5454,11 @@ static int dahdi_ioctl_get_version(unsig
 	bool have_hwec = dahdi_any_hwec_available();
 
 	memset(&vi, 0, sizeof(vi));
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 11, 0)
 	strlcpy(vi.version, dahdi_version, sizeof(vi.version));
+#else
+	strscpy(vi.version, dahdi_version, sizeof(vi.version));
+#endif
 	spin_lock(&ecfactory_list_lock);
 	list_for_each_entry(cur, &ecfactory_list, list) {
 		const char * const ec_name = cur->ec->get_name(NULL);
@@ -5635,7 +5714,11 @@ static int ioctl_dahdi_dial(struct dahdi
 			rv = -EBUSY;
 			break;
 		}
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 11, 0)
 		strlcpy(chan->txdialbuf + strlen(chan->txdialbuf), tdo->dialstr,
+#else
+		strscpy(chan->txdialbuf + strlen(chan->txdialbuf), tdo->dialstr,
+#endif
 			DAHDI_MAX_DTMF_BUF - strlen(chan->txdialbuf));
 		if (!chan->dialing) {
 			chan->dialing = 1;
--- a/drivers/dahdi/dahdi-sysfs-chan.c
+++ b/drivers/dahdi/dahdi-sysfs-chan.c
@@ -231,7 +231,9 @@ static int chan_match(struct device *dev
 
 static struct bus_type chan_bus_type = {
 	.name		= "dahdi_channels",
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 11, 0)
 	.match		= chan_match,
+#endif
 #if LINUX_VERSION_CODE < KERNEL_VERSION(4, 13, 0)
 	.dev_attrs	= chan_dev_attrs,
 #else
--- a/drivers/dahdi/dahdi-sysfs.c
+++ b/drivers/dahdi/dahdi-sysfs.c
@@ -272,7 +272,9 @@ ATTRIBUTE_GROUPS(dahdi);
 
 static struct bus_type spans_bus_type = {
 	.name           = "dahdi_spans",
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 11, 0)
 	.match          = span_match,
+#endif
 	.uevent         = span_uevent,
 #if LINUX_VERSION_CODE < KERNEL_VERSION(4, 13, 0)
 	.dev_attrs	= span_dev_attrs,
--- a/drivers/dahdi/dahdi_dynamic.c
+++ b/drivers/dahdi/dahdi_dynamic.c
@@ -622,8 +622,13 @@ static int _create_dynamic(struct dahdi_
 	}
 	
 	/* Setup parameters properly assuming we're going to be okay. */
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 11, 0)
 	strlcpy(d->dname, dds->driver, sizeof(d->dname));
 	strlcpy(d->addr, dds->addr, sizeof(d->addr));
+#else
+	strscpy(d->dname, dds->driver, sizeof(d->dname));
+	strscpy(d->addr, dds->addr, sizeof(d->addr));
+#endif
 	d->timing = dds->timing;
 	snprintf(d->span.name, sizeof(d->span.name), "DYN/%s/%s",
 		 dds->driver, dds->addr);
--- a/drivers/dahdi/dahdi_dynamic_eth.c
+++ b/drivers/dahdi/dahdi_dynamic_eth.c
@@ -292,12 +292,20 @@ static int ztdeth_create(struct dahdi_dy
 		memset(z, 0, sizeof(struct ztdeth));
 
 		/* Address should be <dev>/<macaddr>[/subaddr] */
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 11, 0)
 		strlcpy(tmp, addr, sizeof(tmp));
+#else
+		strscpy(tmp, addr, sizeof(tmp));
+#endif
 		tmp2 = strchr(tmp, '/');
 		if (tmp2) {
 			*tmp2 = '\0';
 			tmp2++;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 11, 0)
 			strlcpy(z->ethdev, tmp, sizeof(z->ethdev));
+#else
+			strscpy(z->ethdev, tmp, sizeof(z->ethdev));
+#endif
 		} else {
 			printk(KERN_NOTICE "Invalid TDMoE address (no device) '%s'\n", addr);
 			kfree(z);
--- a/drivers/dahdi/dahdi_dynamic_ethmf.c
+++ b/drivers/dahdi/dahdi_dynamic_ethmf.c
@@ -573,7 +573,11 @@ static int ztdethmf_create(struct dahdi_
 	z->rcvbuf = kmalloc(bufsize, GFP_KERNEL);
 
 	/* Address should be <dev>/<macaddr>/subaddr */
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 11, 0)
 	strlcpy(src, addr, sizeof(src));
+#else
+	strscpy(src, addr, sizeof(src));
+#endif
 	/* replace all / with space; otherwise kernel sscanf does not work */
 	src_ptr = src;
 	while (*src_ptr) {
--- a/drivers/dahdi/dahdi_transcode.c
+++ b/drivers/dahdi/dahdi_transcode.c
@@ -329,7 +329,11 @@ static long dahdi_tc_getinfo(unsigned lo
 		return -ENOSYS;
 	}
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 11, 0)
 	strlcpy(info.name, tc->name, sizeof(info.name));
+#else
+	strscpy(info.name, tc->name, sizeof(info.name));
+#endif
 	info.numchannels = tc->numchannels;
 	info.srcfmts = tc->srcfmts;
 	info.dstfmts = tc->dstfmts;
--- a/drivers/dahdi/xpp/card_global.c
+++ b/drivers/dahdi/xpp/card_global.c
@@ -342,7 +342,11 @@ int parse_chip_command(xpd_t *xpd, char
 		XBUS_DBG(GENERAL, xbus, "Dropped packet. Disconnected.\n");
 		return -EBUSY;
 	}
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 11, 0)
 	strlcpy(buf, cmdline, MAX_PROC_WRITE);	/* Save a copy */
+#else
+	strscpy(buf, cmdline, MAX_PROC_WRITE);	/* Save a copy */
+#endif
 	if (buf[0] == '#' || buf[0] == ';')
 		XPD_DBG(REGS, xpd, "Note: '%s'\n", buf);
 	if ((p = strchr(buf, '#')) != NULL)	/* Truncate comments */
